package com.sap.document.sap.rfc.functions;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.ws.Holder;

import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.transport.http.HTTPConduit;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.novelerp.alkyl.dto.AdvanceShipmentNoticeDto;
import com.novelerp.alkyl.dto.AdvanceShipmentNoticeLineDto;
import com.novelerp.alkyl.dto.ApprovalMatrixDto;
import com.novelerp.alkyl.dto.KYCDto;
import com.novelerp.alkyl.service.ApprovalMatrixService;
import com.novelerp.alkyl.service.KYCService;
import com.novelerp.appbase.master.dto.PartnerBankDetailDto;
import com.novelerp.appbase.master.dto.PartnerCompanyAddressDto;
import com.novelerp.appbase.master.service.PartnerBankDetailService;
import com.novelerp.appbase.master.service.PartnerCompanyAddressService;
import com.novelerp.appbase.util.AppBaseConstant;
import com.novelerp.appcontext.dto.BPartnerDto;
import com.novelerp.appcontext.dto.UserDetailsDto;
import com.novelerp.appcontext.dto.UserDto;
import com.novelerp.appcontext.service.BPartnerService;
import com.novelerp.appcontext.service.MediaService;
import com.novelerp.appcontext.service.UserDetailsService;
import com.novelerp.appcontext.service.UserService;
import com.novelerp.appcontext.service.impl.AbstractContextServiceImpl;
import com.novelerp.commons.util.CommonUtil;
import com.novelerp.core.dto.CustomResponseDto;
import com.novelerp.core.dto.ResponseDto;
import com.novelerp.core.service.impl.AbstractServiceImpl;
import com.sap.document.sap.rfc.grn.GrnFtpObject;

/**
 * This class was generated by Apache CXF 3.3.5 2020-01-23T17:00:46.872+05:30
 * Generated source version: 3.3.5
 *
 */
@RequestMapping("/rest")
@Component
public class ZvendorPortal_Zvendorportal_Client {
	
	@Autowired
	private ObjectFactory objectFactory;
	
	@Autowired
	@Qualifier(value=AppBaseConstant.FTP_MEDIA_SERVICE_IMPL)
	private MediaService mediaService;

	@Autowired
	private PartnerCompanyAddressService partnerCompanyAddressService;
	
	@Autowired
	private KYCService kycService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ApprovalMatrixService approvalService;
	
	@Autowired
	private UserDetailsService userDetailsService;

	//private static final QName SERVICE_NAME = new QName("urn:sap-com:document:sap:rfc:functions", "ZVENDOR_PORTAL");

	private static final String USER_NAME = "basis";
	private static final String PASSWORD = "basis1917";
	
	// QUALITY
	//private static final String ADDRESS = "http://103.231.11.56:8000/sap/bc/srt/rfc/sap/zvendor_portal/009/zvendor_portal/zvendor_portal";
	
	// SAPDEV
	private static final String ADDRESS = "http://103.231.11.53:8000/sap/bc/srt/rfc/sap/zvendor_portal/009/zvendor_portal/zvendor_portal";
	
//	private static final String COMPANY_CODE = "1800";
//	private static final String PURCHASE_ORG = "9000";
	
	private static final String COMPANY_CODE = "1000";
	private static final String PURCHASE_ORG = "1000";
	
	public ZvendorPortal_Zvendorportal_Client() {
		
	}

	public static void main(String args[]) throws java.lang.Exception {
		/*URL wsdlURL = ZVENDORPORTAL_Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}*/
		
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean(); 
		
	    factory.setServiceClass(ZvendorPortal.class); 
	    factory.setAddress(ADDRESS); 
	    
	    ZvendorPortal port1 = (ZvendorPortal) factory.create();
	    
	    Client client = ClientProxy.getClient(port1);
	    HTTPConduit http = (HTTPConduit) client.getConduit();

	    http.getAuthorization().setUserName("basis");
	    http.getAuthorization().setPassword("basis1917");
		
		{
			System.out.println("Invoking zmmVENDORPORTAL...");
			TABLEOFZVENDORPORTAL inputVal = new TABLEOFZVENDORPORTAL();
			Holder<TABLEOFZVENDORPORTAL> in = new Holder<>(inputVal);
			TABLEOFZVENDORPORTAL outVal = new TABLEOFZVENDORPORTAL();
			Holder<TABLEOFZVENDORPORTAL> out = new Holder<>(outVal);
			
			List<ZVENDORPORTAL_Type> vendorList = inputVal.getItem();
			
			ZVENDORPORTAL_Type vendor = new ZVENDORPORTAL_Type();
			
			vendor.setBUKRS(COMPANY_CODE);
			vendor.setEKORG(PURCHASE_ORG);
			vendor.setAKONT("26112001");
			vendor.setNAME1("ANKUSH");
			vendor.setLAND1("IN");
			vendor.setREGIO("13");
			vendor.setPSTLZ("431401");
			vendor.setBANKL("HDFC0001077");
			vendor.setBANKN("2233445566");
			vendor.setKTOKK("ZRMD");
			vendor.setKALSK("");
			vendor.setEKGRP("");
			vendor.setWAERS("INR");
			vendor.setZTERM("");
			vendor.setINCO1("");
			vendor.setSPERZ("");
			
			vendorList.add(vendor);
			
			port1.zmmVENDORPORTAL(in, out);

			System.out.println("zmmVENDORPORTAL._zmmVENDORPORTAL_input=" + in.value);
			System.out.println("zmmVENDORPORTAL._zmmVENDORPORTAL_output=" + out.value);

		}
	}
	
	@Autowired
	private BPartnerService partnerService;
	
	@Autowired
	private PartnerBankDetailService partnerBankDetailService;
	
	private PartnerBankDetailDto getPartnerBankData(BPartnerDto partner){
		List<PartnerBankDetailDto> bankDetails =  partnerBankDetailService.findDtos("getBankDetailsQuery"
				, AbstractContextServiceImpl.getParamMap("bPartnerId", partner.getbPartnerId()));
		if(CommonUtil.isCollectionEmpty(bankDetails)){
			return new PartnerBankDetailDto();
		}
		return bankDetails.get(0);
	}
	
	@Transactional(propagation=Propagation.REQUIRES_NEW,readOnly=true)
	public String createVendor(ApprovalMatrixDto dto){
		ZvendorPortal port = getPort(ADDRESS);
		setupClient(port, USER_NAME, PASSWORD);
		
		TABLEOFZVENDORPORTAL inputVal = getCreateWSInput(dto);
		Holder<TABLEOFZVENDORPORTAL> in = new Holder<>(inputVal);
		
		TABLEOFZVENDORPORTAL outVal = objectFactory.createTABLEOFZVENDORPORTAL();
		Holder<TABLEOFZVENDORPORTAL> out = new Holder<>(outVal);
		String vendorCode = "" ;
		try {
			port.zmmVENDORPORTAL(in, out);
			if(null!=out && null!= out.value && !CommonUtil.isCollectionEmpty(out.value.item)){
				ZVENDORPORTAL_Type outPut = out.value.item.get(0);
				vendorCode = outPut.lifnr;
				if(CommonUtil.isStringEmpty(vendorCode)){
					throw new RuntimeException(out.value.getItem().get(0).getSTREET());
				}
			}
			return vendorCode;
		} catch (ZMMVENDORPORTALException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}
	
	@Transactional(propagation=Propagation.REQUIRES_NEW,readOnly=true)
	public boolean postVendorData(ApprovalMatrixDto dto) throws Exception{
		ZVENDORPORTAL_Type inputVal = getZVendorPortalTypeFromApprovalMatrix(dto);
		
		try {
			if(null != inputVal ){
				String json = CommonUtil.getObjectJson(inputVal);
				return mediaService.writeByteArrayTo(json.getBytes(), AppBaseConstant.FTP_VENDOR_TO_PROCESS_PATH, inputVal.getJ1IPANNO()+".txt");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		
		return false;
	}
	
	@Transactional(propagation=Propagation.REQUIRES_NEW,readOnly=true)
	public ZVENDORPORTAL_Type fetchVendorData(String fileName) throws Exception{
		try {
			byte[] byteOut = mediaService.getBISFromAttachment(fileName);
			if(null == byteOut){
				throw new RuntimeException("Empty File "+fileName);
			}
			ObjectMapper objJson = new ObjectMapper();
			
			return objJson.readValue(byteOut, ZVENDORPORTAL_Type.class); 
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	private ZvendorPortal getPort(String address){
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean(); 
	    factory.setServiceClass(ZvendorPortal.class); 
	    factory.setAddress(address); 
	    return (ZvendorPortal) factory.create();
	}
	
	private void setupClient(ZvendorPortal port,String usr, String pwd){
		Client client = ClientProxy.getClient(port);
	    HTTPConduit http = (HTTPConduit) client.getConduit();
	    http.getAuthorization().setUserName(usr);
	    http.getAuthorization().setPassword(pwd);
	} 
	
	private TABLEOFZVENDORPORTAL getCreateWSInput(ApprovalMatrixDto dto){
		TABLEOFZVENDORPORTAL input = objectFactory.createTABLEOFZVENDORPORTAL();
		List<ZVENDORPORTAL_Type> vendorList = input.getItem();
		vendorList.clear();
		vendorList.add(getZVendorPortalTypeFromApprovalMatrix(dto));
		return input;
	}

	@Transactional(propagation=Propagation.REQUIRES_NEW, readOnly=true)
	private ZVENDORPORTAL_Type getZVendorPortalTypeFromApprovalMatrix(ApprovalMatrixDto dto){
		ZVENDORPORTAL_Type vendor = objectFactory.createZVENDORPORTAL_Type();
		if(dto == null){
			return vendor;
		}
		vendor.setBUKRS(COMPANY_CODE);
		vendor.setEKORG(PURCHASE_ORG);
		vendor.setAKONT(dto.getReconAccount());
		if(dto.getPartner()!=null){
			BPartnerDto partner = partnerService.findDto("getPartnerByVendorPartnerId",
					AbstractContextServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId()));
			dto.setPartner(partner);
			vendor.setLIFNR(partner.getVendorSapCode());
			vendor.setNAME1(dto.getPartner().getName());
			vendor.setJ1IPANNO(dto.getPartner().getPanNumber());
			Map<String, Object> params = AbstractServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId());
			params.put("locationType", AppBaseConstant.LOCATION_TYPE_COMP_ADDR);
			List<PartnerCompanyAddressDto> partnerAddress = partnerCompanyAddressService.findDtos("getPrimaryAddressQueryByLocation", params);
			UserDto user=userService.getUserByPartnerId(dto.getPartner().getbPartnerId());
			if(!CommonUtil.isCollectionEmpty(partnerAddress)){
				vendor.setSTREET(partnerAddress.get(0).getLocation().getAddress1());
				vendor.setSTREET2(partnerAddress.get(0).getLocation().getAddress2());
				vendor.setSTREET3(partnerAddress.get(0).getLocation().getAddress3());
				vendor.setPSTLZ(partnerAddress.get(0).getLocation().getPostal());
				vendor.setLAND1("IN");
				vendor.setREGIO(partnerAddress.get(0).getLocation().getRegion().getCode());
				/*user=partnerAddress.get(0).getCreatedBy();*/
			}
					
			if("Y".equals(partner.getIsGstApplicable())){
				vendor.setSTCD1(partner.getGstinNo());
			}
			
			if(null!=user){
				vendor.setSMTPADDR(user.getEmail());
				if(null!=user.getUserDetails()){
				vendor.setTELF1(user.getUserDetails().getTelephone1());
				vendor.setTELNUMBER(user.getUserDetails().getMobileNo());
				}
			}
		}
		vendor.setKTOKK(dto.getVendorClassification());
		vendor.setKALSK(dto.getVendorSchemaGroup());
		vendor.setEKGRP(dto.getPurchaseGroup());
		vendor.setWAERS(dto.getOrderCurrency());
		//vendor.setVendorCode(dto.getVendorCode());
		if(CommonUtil.isStringEmpty(dto.getIsPaymentTerms())){
			vendor.setZTERM("");
		}else {
			vendor.setZTERM(dto.getIsPaymentTerms());
		}
		
		if(CommonUtil.isStringEmpty(dto.getIsIncomeTerms())){
			vendor.setINCO1("");
		}else {
			vendor.setINCO1(dto.getIsIncomeTerms());
		}
		
		vendor.setSPERZ("");
		PartnerBankDetailDto bankDetails = getPartnerBankData(dto.getPartner());
		if(bankDetails!=null){
			vendor.setBANKN(bankDetails.getAccountNumber());
			if(bankDetails.getBankNameDetails()!=null){
				vendor.setBANKL(bankDetails.getIfscCode());
			}
			vendor.setKOINH(bankDetails.getBenificaryName());
		}	
		Map<String, Object> param = AbstractServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId());
		KYCDto kyc=kycService.findDto("getKYCByPartnerId", param);
		if(null!=kyc){
			vendor.setIsmsme(kyc.getIsMSME());
			if("Y".equals(kyc.getIsMSME())){
				vendor.setMsmeno(kyc.getMsmeNumber());
			}
		}
		vendor.setWAERS(dto.getOrderCurrency());
		return vendor;
	}
	@Transactional(propagation=Propagation.REQUIRES_NEW,readOnly=true)
	public boolean postVendorDataUserDto(ApprovalMatrixDto dto,UserDto user) throws Exception{
		ZVENDORPORTAL_Type inputVal = getZVendorPortalTypeFromApprovalMatrixUserDto(dto, user);
		System.out.println("postVendorDataUserDto:" +inputVal);
		try {
			if(null != inputVal ){
				String json = CommonUtil.getObjectJson(inputVal);
				System.out.println("postVendorDataUserDto FTP Try Block:" +json);
				return mediaService.writeByteArrayTo(json.getBytes(), AppBaseConstant.FTP_VENDOR_TO_PROCESS_PATH, inputVal.getJ1IPANNO()+".txt");
			}
		} catch (Exception e) {
			System.out.println("postVendorDataUserDto FTP catch Block:" +e);
			e.printStackTrace();
			throw e;
		}
		
		return false;
	}
	
	
	
@RequestMapping(value="/vendorCreation/{partnerId}" , method = RequestMethod.GET)
	 public @ResponseBody String moveType103ForSAP(@PathVariable("partnerId") Long partnerId) throws Exception {		

	ApprovalMatrixDto dto= approvalService.findDto("getApprovalMatrix",AbstractContextServiceImpl.getParamMap("partnerId", partnerId));
	UserDto user=userService.fetchUser(partnerId);
	
	ZVENDORPORTAL_Type inputVal = getZVendorPortalTypeFromApprovalMatrixUserDto(dto, user);		
		try {
			if(null != inputVal ){
				String json = CommonUtil.getObjectJson(inputVal);	
		
					return json;
			
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		
		return null;
	
	}
	
	
	@Transactional(propagation=Propagation.REQUIRES_NEW, readOnly=true)
	private ZVENDORPORTAL_Type getZVendorPortalTypeFromApprovalMatrixUserDto(ApprovalMatrixDto dto,UserDto user){
		ZVENDORPORTAL_Type vendor = objectFactory.createZVENDORPORTAL_Type();
		if(dto == null){
			return vendor;
		}
		vendor.setBUKRS(COMPANY_CODE);
		vendor.setEKORG(PURCHASE_ORG);
		vendor.setAKONT(dto.getReconAccount());
		if(dto.getPartner()!=null){
			BPartnerDto partner = partnerService.findDto("getPartnerByVendorPartnerId",
					AbstractContextServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId()));
			dto.setPartner(partner);
			//vendor.setLIFNR(partner.getVendorSapCode());
			vendor.setLIFNR(dto.getVendorCode());
			vendor.setNAME1(dto.getPartner().getName());
			vendor.setJ1IPANNO(dto.getPartner().getPanNumber());
			Map<String, Object> params = AbstractServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId());
			params.put("locationType", AppBaseConstant.LOCATION_TYPE_COMP_ADDR);
			List<PartnerCompanyAddressDto> partnerAddress = partnerCompanyAddressService.findDtos("getPrimaryAddressQueryByLocation", params);
			if(!CommonUtil.isCollectionEmpty(partnerAddress)){
				vendor.setSTREET(partnerAddress.get(0).getLocation().getAddress1());
				vendor.setSTREET2(partnerAddress.get(0).getLocation().getAddress2());
				vendor.setSTREET3(partnerAddress.get(0).getLocation().getAddress3());
				vendor.setPSTLZ(partnerAddress.get(0).getLocation().getPostal());
				vendor.setLAND1("IN");
				vendor.setREGIO(partnerAddress.get(0).getLocation().getRegion().getCode());
				vendor.setORT01(partnerAddress.get(0).getLocation().getDistrict().getName());
				/*user=partnerAddress.get(0).getCreatedBy();*/
			}
					
//			if("Y".equals(partner.getIsGstApplicable())){
				vendor.setSTCD1(partner.getGstinNo());
		//	}
			
			if(null!=user){
				vendor.setSMTPADDR(user.getEmail());
				if(null!=user.getUserDetails()){
				vendor.setTELF1(user.getUserDetails().getTelephone1());
				vendor.setTELNUMBER(user.getUserDetails().getMobileNo());
				}
			}
		}
		vendor.setKTOKK(dto.getVendorClassification());
		vendor.setKALSK(dto.getVendorSchemaGroup());
		vendor.setEKGRP(dto.getPurchaseGroup());
		vendor.setWAERS(dto.getOrderCurrency());
		vendor.setZTERM(dto.getVendorPaymentTerms());
		vendor.setINCO1(dto.getVendorIncoTerms());
		vendor.setInco2(dto.getVendorIncoDescription());
		//vendor.setVendorCode(dto.getVendorCode());
		//vendor.setIndustry(dto.getIndustry());
		vendor.setBrsch(dto.getIndustry());
		/*if(CommonUtil.isStringEmpty(dto.getIsPaymentTerms())){
			vendor.setZTERM("");
		}else {
			vendor.setZTERM(dto.getIsPaymentTerms());
		}
		
		if(CommonUtil.isStringEmpty(dto.getIsIncomeTerms())){
			vendor.setINCO1("");
		}else {
			vendor.setINCO1(dto.getIsIncomeTerms());
		}*/
		
		vendor.setSPERZ("");
		PartnerBankDetailDto bankDetails = getPartnerBankData(dto.getPartner());
		if(bankDetails!=null){
			vendor.setBANKN(bankDetails.getAccountNumber());
			if(bankDetails.getBankNameDetails()!=null){
				vendor.setBANKL(bankDetails.getIfscCode());
				vendor.setBANKA(bankDetails.getBankNameDetails().getName());
				vendor.setBRNCH(bankDetails.getBranchName().getBranchName());
			}
			vendor.setKOINH(bankDetails.getBenificaryName());
		}	
		Map<String, Object> param = AbstractServiceImpl.getParamMap("partnerId", dto.getPartner().getbPartnerId());
		KYCDto kyc=kycService.findDto("getKYCByPartnerId", param);
		if(null!=kyc){
			vendor.setMsmeType(kyc.getMsmeType());
			vendor.setIsmsme(kyc.getIsMSME());
			if("Y".equals(kyc.getIsMSME())){
				String udyamNo=kyc.getMsmeNumber().substring(6);
				vendor.setMsmeno(udyamNo);
			
			//	vendor.setMsmeno(kyc.getMsmeNumber());
			}
		}
		List<UserDetailsDto> userDetail=userDetailsService.findDtos("getVendorUserByPartnerID", param);
		List<ZVendorUser_Type> zVendorUser= new ArrayList<>();
		for(UserDetailsDto userDetails:userDetail){
			ZVendorUser_Type vendorUser = new ZVendorUser_Type();
			vendorUser.setName(userDetails.getName());
			vendorUser.setMob(userDetails.getMobileNo());
			vendorUser.setSmtpaddr(userDetails.getEmail());
			vendorUser.setTelf1(userDetails.getTelephone1());
			vendorUser.setPref(userDetails.getTitle());
			vendorUser.setDes(userDetails.getUserDesignation());
			vendorUser.setDept(userDetails.getUserDept());
			vendorUser.setEnq(userDetails.getIsReceiveEnquiry());
			vendorUser.setPo(userDetails.getIsReceivePO());
			vendorUser.setAc(userDetails.getIsReceiveACInfo());
			zVendorUser.add(vendorUser);
		}
		vendor.setUser(zVendorUser);
		vendor.setWAERS(dto.getOrderCurrency());
		return vendor;
	}
	
}